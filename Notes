############ EXISTING EXAMPLES ############

1.
# NAME: sample.py
# DESCRIPTION: Creates a sample from a collection of graphs. The sample may be balanced w.r.t the classes
It uses the libraries/structures 
	import xml.etree.ElementTree as ET
	import argparse
Usefull for python graph manipulation and using scripts from shell with arguments
Has code for writing collection into xml format
# Location: /home/lucas/Documents/Stage/gedlibpy/include/gedlib-master/data/collections

$ python3 sample.py \<dataset\> \<sample\> [-h] [--help] [--exclude \<graph collection\>] [--balanced] \<--size \<size\> | --size_ratio \<size ratio\>\>



2.
# NAME: analyse_dataset.py
# DESCRIPTION: analyses a complete dataset. Number of graphs, nodes, edges, are they cyclic, planar.
# Location: /home/lucas/Documents/Stage/gedlibpy/include/gedlib-master/data/collections


3. Reading a gxl file
The import xml.etree.ElementTree module has the function ET.parse(os.path.join(path, gxl_file)).getroot() that will get the begining of the xml file
The command .findall(header) will return a list of all the objects containing that header. To read the attributes, use the dictionary .attrib


############ DATA ############
Datasets have two important files related:
    - dataset: One folder containing all the gxl files. Headers for a single file are something like 
        <gxl>
        <graph> 
        <node id="_0"> <attr name="aaa"> ... </attr></node> 
        <edge from="_0", to="_1"><attr name="bbb"></attr></edge>
        </graph>
        </gxl>
    - collection: This is a cxl file that contains the names of each file containing a graph
    Example:
    <GraphCollection xmlns:ns="http://www.iam.unibe.ch/%7Emneuhaus/FAN/1.0">
        <fingerprints base="/home/fkistat/DB/molecules/gxl-a400-i1600" classmodel="henry5" count="1500">
            <print file="molecule001.gxl" class="a"/>
        </fingerprints>
    </GraphCollection>
    
    ATENCION: Hay archivos xml y cxl para representar colleciones. Algunos tienen el tag graph, otros print. Esto puede generar errores en ciertos ejemplos.
    
    
    
    
    
############ Observaciones ############

Hay dos formatos para los grafos:
- Un formato "interno" de GEDLIB que está ligado a los formatos gxl. GEDLIB tiene su propio método para leer estos grafos y realizar todos los cálculos. Hay algunas funciones repartidas en los ejemplos para escribir los grafos de vuelta al formato GXL

- Formato NetworkX, libreria indepentiende en python para representar grafos. Existen métodos en paralelo para hacer los cálculos con estos grafos.

- En la carpeta include/utils copié el código de graphfiles.py para leer un archivo gxl y devolver un dataset networkx. Código tomado de 
https://github.com/jajupmochi/graphkit-learn/blob/master/gklearn/utils/graphfiles.py
Se importaba pygraph, pero resulta que hay otra libreria con ese nombre, entonces no se puede importar con pip

- Para crear grafos parece mucho más sencillo hacer el paso por networkX.


- He modificado los archivos median.py y xp_letter_gbr.py de la carpeta /home/lucas/Documents/Stage/gedlibpy/Median_Example pues tenian varios errores
    Llamaban al atributo node del grafo nx, cuando en realidad es nodes







################### INSTALACIÓN #############

0. Clonar el repositorio

    https://github.com/Ryurin/gedlibpy

1. Al clonar el repositorio y lanzar setup.py, aparece este problema.

gedlibpy.cpp:678:10: fatal error: numpy/arrayobject.h: No such file or directory
  678 | #include "numpy/arrayobject.h"
      |          ^~~~~~~~~~~~~~~~~~~~~
compilation terminated.
error: command 'x86_64-linux-gnu-gcc' failed with exit status 1

Para arreglarlo, hay que añadir numpy.get_include() en la lista include_dirs de setup.py

Otro problema: En el código, en la función add_nx_graph. Para solucionarlo
Modifiqué el archivo gedlibpy.pyx y también el archivo cpp (No sé si tocaba los dos o solo uno)

gedlibpy.pyx -> linea 854
gedlibpy.cpp: linea 8433 __pyx_n_s_node -> __pyx_n_s_nodes

ERROR en gedlibpy
    Traceback (most recent call last):
      File "ged.py", line 35, in <module>
        gedlibpy.add_nx_graph(graph, "A")
      File "gedlibpy.pyx", line 854, in gedlibpy.add_nx_graph
        add_node(id, str(node), g.node[node])
    AttributeError: 'Graph' object has no attribute 'node'
  
After relaunching the setup.py file in the terminal with these modifications, it worked



Ahora debería funcionar el setup.py


2. En algunos códigos se usa el módulo pygraph. Sin embargo, este no es el módulo que instala pip.
El archivo necesario es graphfiles.py disponible en 
    https://github.com/bgauzere/py-graph/tree/ljia/pygraph/utils
    o en 
    https://git.litislab.fr/bgauzere/py-graph/blob/master/pygraph/utils/graphfiles.py
Yo preferí crea un método yo mismo

3.
Para que funcione gedlibpy, hay que definir la variable de entorno
export LD_LIBRARY_PATH=.:/home/lucas/Documents/Stage/gedlibpy/lib/fann/:/home/lucas/Documents/Stage/gedlibpy/lib/libsvm.3.22:/home/lucas/Documents/Stage/gedlibpy/lib/nomad
o añadir 4 lineas al comenzar: (quivalente a import librariesImport en la documentación)

# Load the gedlibpy libraries 
libpath = "/home/lucas/Documents/stage_gedlibpy/gedlibpy"
# Equivalent to import librariesImport
from ctypes import *
lib1 = cdll.LoadLibrary(libpath + "/" + 'lib/fann/libdoublefann.so')
lib2 = cdll.LoadLibrary(libpath + "/" + 'lib/libsvm.3.22/libsvm.so')
lib3 = cdll.LoadLibrary(libpath + "/" + 'lib/nomad/libnomad.so')
lib4 = cdll.LoadLibrary(libpath + "/" + 'lib/nomad/libsgtelib.so')

sys.path.append(libpath)
import gedlibpy



########### Sobre GEDLIBPY ###############
LIST OF OPTIONS
list_of_edit_cost_options
[b'CHEM_1', b'CHEM_2', b'CMU', b'GREC_1', b'GREC_2', b'LETTER', b'FINGERPRINT', b'PROTEIN', b'CONSTANT']
list_of_method_options
[b'BRANCH', b'BRANCH_FAST', b'BRANCH_TIGHT', b'BRANCH_UNIFORM', b'BRANCH_COMPACT', b'PARTITION', b'HYBRID', b'RING', b'ANCHOR_AWARE_GED', b'WALKS', b'IPFP', b'BIPARTITE', b'SUBGRAPH', b'NODE', b'RING_ML', b'BIPARTITE_ML', b'REFINE', b'BP_BEAM', b'SIMULATED_ANNEALING', b'HED', b'STAR']
list_of_init_options
[b'LAZY_WITHOUT_SHUFFLED_COPIES', b'EAGER_WITHOUT_SHUFFLED_COPIES', b'LAZY_WITH_SHUFFLED_COPIES', b'EAGER_WITH_SHUFFLED_COPIES']


18446744073709551614 is the number for infinity (new or deleted nodes)



    
